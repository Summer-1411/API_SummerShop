generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  id        Int    @id @default(autoincrement())
  id_user   Int
  id_filter Int
  quantity  Int
  filter    filter @relation(fields: [id_filter], references: [id], onDelete: Cascade, map: "cart_filter")
  user      user   @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "cart_user")

  @@index([id_filter], map: "cart_filter")
  @@index([id_user], map: "cart_user")
}

model category {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  createAt DateTime  @default(now()) @db.DateTime(0)
  updateAt DateTime  @db.DateTime(0)
  status   Int       @default(1)
  product  product[]
}

model feedback {
  id          Int       @id @default(autoincrement())
  id_user     Int
  id_product  Int
  id_order    Int
  rate        Int
  description String?   @db.Text
  img         String?   @db.Text
  createAt    DateTime? @default(now()) @db.DateTime(0)
  updateAt    DateTime? @db.DateTime(0)
  orders      orders    @relation(fields: [id_order], references: [id], onDelete: Cascade, map: "feedback_order")
  product     product   @relation(fields: [id_product], references: [id], onDelete: Cascade, map: "feedback_product")
  user        user      @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "feedback_user")

  @@index([id_order], map: "feedback_order")
  @@index([id_product], map: "feedback_product")
  @@index([id_user], map: "feedback_user")
}

model filter {
  id           Int            @id @default(autoincrement())
  id_pro       Int
  color        String         @db.VarChar(255)
  size         String         @db.VarChar(255)
  quantity     Int
  img          String         @db.VarChar(255)
  price        Int
  status       Int            @default(1)
  cart         cart[]
  product      product        @relation(fields: [id_pro], references: [id], onDelete: Cascade, map: "filter_ibfk_1")
  order_detail order_detail[]

  @@index([id_pro], map: "filter_ibfk_1")
}

model order_detail {
  id        Int    @id @default(autoincrement())
  id_order  Int
  id_filter Int
  quantity  Int
  price     Int
  filter    filter @relation(fields: [id_filter], references: [id], onDelete: Cascade, map: "details_fillter")
  orders    orders @relation(fields: [id_order], references: [id], onDelete: Cascade, map: "details_orders")

  @@index([id_filter], map: "details_fillter")
  @@index([id_order], map: "details_orders")
}

model orders {
  id               Int            @id @default(autoincrement())
  id_user          Int
  fullname         String         @db.VarChar(255)
  phone            String         @db.VarChar(255)
  status           Int            @default(0)
  reason           String?        @db.Text
  orderDate        DateTime       @default(now()) @db.DateTime(0)
  shipping_address String         @db.VarChar(255)
  shipping_method  String         @db.Text
  payment_method   String         @default("1") @db.VarChar(255)
  total_amount     Int
  note             String?        @db.Text
  voucherValue     Int
  feedback         feedback[]
  order_detail     order_detail[]
  user             user           @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "order_user")

  @@index([id_user], map: "order_user")
}

model otp {
  id       Int      @id @default(autoincrement())
  otp      String   @db.VarChar(20)
  email    String   @db.VarChar(255)
  createAt DateTime @default(now()) @db.DateTime(0)
}

model producer {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  createAt DateTime? @default(now()) @db.DateTime(0)
  updateAt DateTime? @db.DateTime(0)
  status   Int?      @default(1)
  product  product[]
}

model product {
  id             Int        @id @default(autoincrement())
  name           String?    @db.VarChar(255)
  description    String?    @db.Text
  information    String?    @db.Text
  priceRange     Int
  qualityGrade   String?    @db.VarChar(255)
  img            String?    @db.VarChar(255)
  star           Float?     @default(5) @db.Float
  id_producer    Int?
  id_category    Int?
  createAt       DateTime?  @default(now()) @db.DateTime(0)
  updateAt       DateTime?  @default(now()) @db.DateTime(0)
  status         Int        @default(1)
  warrantyPeriod Int?
  warrantyDetail String?    @db.Text
  feedback       feedback[]
  filter         filter[]
  producer       producer?  @relation(fields: [id_producer], references: [id], onDelete: Cascade, map: "pro_producer")
  category       category?  @relation(fields: [id_category], references: [id], onDelete: Cascade, map: "product_ibfk_2")

  @@index([id_producer], map: "pro_producer")
  @@index([id_category], map: "product_ibfk_2")
}

model user {
  id       Int        @id @default(autoincrement())
  email    String     @db.VarChar(255)
  password String     @db.VarChar(255)
  username String     @db.VarChar(255)
  avatar   String     @default("default.jpg") @db.VarChar(255)
  birthday DateTime?  @db.Date
  gender   Int?
  isAdmin  Int        @default(0)
  status   Int        @default(1)
  createAt DateTime   @default(now()) @db.DateTime(0)
  updateAt DateTime   @default(now()) @db.DateTime(0)
  cart     cart[]
  feedback feedback[]
  orders   orders[]
}

model voucher {
  id            Int       @id @default(autoincrement())
  code          String    @db.VarChar(20)
  value         Int
  quantity      Int
  initQuantity  Int
  minOrderValue Float?
  maxMoney      Float?
  expiredTime   DateTime  @db.DateTime(0)
  description   String?   @db.Text
  createAt      DateTime  @default(now()) @db.DateTime(0)
  updateAt      DateTime? @db.DateTime(0)
}

model api_log {
  id           Int      @id @default(autoincrement())
  method       String   @db.VarChar(10)
  url          String   @db.VarChar(255)
  requestBody  String   @db.Text
  statusCode   Int
  responseBody String?  @db.Text
  responseTime Float
  createAt     DateTime @default(now()) @db.DateTime(0)
  userAgent    String   @db.VarChar(255)
  userId       Int?
  ipAddress    String   @db.VarChar(50)
}

model firebase_token {
  id        Int      @id @default(autoincrement())
  token     String   @db.VarChar(255)
  userId    Int?
  createdAt DateTime @default(now()) @db.DateTime(0)
}

model warranty {
  id       Int      @id @default(autoincrement())
  filterId Int
  userId   Int
  orderId  Int
  fromDate DateTime @db.Date
  toDate   DateTime @db.Date
  status   String   @db.VarChar(20)
  createAt DateTime @default(now()) @db.DateTime(0)
}

model warranty_request {
  id          Int       @id @default(autoincrement())
  description String?   @db.Text
  img         String?   @db.VarChar(255)
  createAt    DateTime? @default(now()) @db.DateTime(0)
  status      String?   @db.VarChar(30)
  response    String?   @db.Text
}
